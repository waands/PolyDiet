using System;
using System.IO;
using UnityEngine;
using PolyDiet.Core.ModelLoading.Validation;
using PolyDiet.Core.ModelLoading.Conversion;
using PolyDiet.Core.ModelLoading.Compression;
using PolyDiet.Core.ModelLoading.Loading;
using PolyDiet.Core.ModelLoading.Wizard;

namespace PolyDiet.Tests
{
    /// <summary>
    /// Teste r√°pido do sistema de loader
    /// </summary>
    public class QuickLoaderTest : MonoBehaviour
    {
        [ContextMenu("Test System")]
        public async void TestSystem()
        {
            Debug.Log("=== TESTE R√ÅPIDO DO SISTEMA DE LOADER ===");
            
            try
            {
                // Teste 1: Valida√ß√£o
                Debug.Log("üîç Testando valida√ß√£o...");
                var testPath = "Assets/StreamingAssets/Models/suzanne/original/model.glb";
                if (File.Exists(testPath))
                {
                    var validation = GltfValidator.QuickValidate(testPath);
                    Debug.Log($"‚úÖ Valida√ß√£o: {(validation.IsValid ? "SUCESSO" : "FALHOU")} - {validation.ErrorMessage}");
                }
                else
                {
                    Debug.Log("‚ö†Ô∏è Arquivo de teste n√£o encontrado para valida√ß√£o");
                }
                
                // Teste 2: Convers√£o
                Debug.Log("üîÑ Testando convers√£o...");
                var conversionManager = new ConversionManager();
                var strategies = await conversionManager.GetAvailableStrategiesAsync(".obj");
                Debug.Log($"‚úÖ Estrat√©gias de convers√£o: {strategies.Count} encontradas");
                
                // Teste 3: Compress√£o
                Debug.Log("üóúÔ∏è Testando compress√£o...");
                var compressionManager = new CompressionManager();
                var compressions = await compressionManager.GetAvailableCompressionsAsync();
                Debug.Log($"‚úÖ Compressores: {compressions.Length} encontrados");
                
                // Teste 4: Carregamento
                Debug.Log("üì• Testando carregamento...");
                var modelLoader = new ModelLoader();
                var loadResult = await modelLoader.LoadModelWithFallbackAsync("suzanne");
                Debug.Log($"‚úÖ Carregamento: {(loadResult.Success ? "SUCESSO" : "FALHOU")} - {loadResult.ErrorMessage}");
                
                // Teste 5: Wizard
                Debug.Log("üßô Testando wizard...");
                var wizardValidation = await WizardValidator.ValidateToolsAsync();
                Debug.Log($"‚úÖ Valida√ß√£o de ferramentas: {(wizardValidation.IsValid ? "SUCESSO" : "FALHOU")}");
                
                Debug.Log("=== TESTE CONCLU√çDO COM SUCESSO ===");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå ERRO NO TESTE: {ex.Message}");
                Debug.LogError($"Stack trace: {ex.StackTrace}");
            }
        }
        
        [ContextMenu("Test Individual Components")]
        public async void TestIndividualComponents()
        {
            Debug.Log("=== TESTE INDIVIDUAL DE COMPONENTES ===");
            
            // Teste GltfValidator
            try
            {
                Debug.Log("üîç Testando GltfValidator...");
                var result = GltfValidator.QuickValidate("test.glb");
                Debug.Log($"‚úÖ GltfValidator funcionando: {result.IsValid}");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå GltfValidator falhou: {ex.Message}");
            }
            
            // Teste ConversionManager
            try
            {
                Debug.Log("üîÑ Testando ConversionManager...");
                var manager = new ConversionManager();
                var strategies = await manager.GetAvailableStrategiesAsync(".obj");
                Debug.Log($"‚úÖ ConversionManager funcionando: {strategies.Count} estrat√©gias");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå ConversionManager falhou: {ex.Message}");
            }
            
            // Teste CompressionManager
            try
            {
                Debug.Log("üóúÔ∏è Testando CompressionManager...");
                var manager = new CompressionManager();
                var compressions = await manager.GetAvailableCompressionsAsync();
                Debug.Log($"‚úÖ CompressionManager funcionando: {compressions.Length} compressores");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå CompressionManager falhou: {ex.Message}");
            }
            
            // Teste ModelLoader
            try
            {
                Debug.Log("üì• Testando ModelLoader...");
                var loader = new ModelLoader();
                Debug.Log($"‚úÖ ModelLoader funcionando: instanciado com sucesso");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå ModelLoader falhou: {ex.Message}");
            }
            
            // Teste WizardValidator
            try
            {
                Debug.Log("üßô Testando WizardValidator...");
                var validation = await WizardValidator.ValidateToolsAsync();
                Debug.Log($"‚úÖ WizardValidator funcionando: {validation.IsValid}");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå WizardValidator falhou: {ex.Message}");
            }
            
            Debug.Log("=== TESTE INDIVIDUAL CONCLU√çDO ===");
        }
    }
}
